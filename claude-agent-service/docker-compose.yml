version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: claude-agent-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-claude_agent}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-claude_agent_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-claude_agent}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - claude-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: claude-agent-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - claude-network

  # Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.backend
    container_name: claude-agent-backend
    ports:
      - "8000:8000"
    volumes:
      - ./workspace:/workspace
      - ./backend/app:/app/app  # Mount for development
    environment:
      # App Settings
      - APP_NAME=${APP_NAME:-Claude Agent Service}
      - APP_VERSION=${APP_VERSION:-0.1.0}
      - DEBUG=${DEBUG:-false}
      - HOST=0.0.0.0
      - PORT=8000

      # Claude API
      - ANTHROPIC_BEDROCK_BASE_URL=${ANTHROPIC_BEDROCK_BASE_URL}
      - CLAUDE_CODE_SKIP_BEDROCK_AUTH=${CLAUDE_CODE_SKIP_BEDROCK_AUTH}
      - CLAUDE_CODE_USE_BEDROCK=${CLAUDE_CODE_USE_BEDROCK}
      - ANTHROPIC_AUTH_TOKEN=${ANTHROPIC_AUTH_TOKEN}
      - ANTHROPIC_SMALL_FAST_MODEL=${ANTHROPIC_SMALL_FAST_MODEL}
      - ANTHROPIC_MODEL=${ANTHROPIC_MODEL}

      # Database
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER:-claude_agent}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB:-claude_agent_db}

      # Redis (no password by default)
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=${REDIS_DB:-0}
      - REDIS_CACHE_TTL=${REDIS_CACHE_TTL:-3600}

      # Service Config
      - WORKSPACE_ROOT=/workspace
      - MAX_SESSIONS=${MAX_SESSIONS:-100}
      - SESSION_TIMEOUT=${SESSION_TIMEOUT:-3600}

    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - claude-network

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: claude-agent-frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://172.16.18.184:8000}
      - NODE_ENV=production
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - claude-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  claude-network:
    driver: bridge
