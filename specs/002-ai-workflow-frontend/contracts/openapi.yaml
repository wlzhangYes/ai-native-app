openapi: 3.0.3
info:
  title: AI-Driven Workflow Execution API
  description: |
    Backend API for AI-driven software development workflow system.
    Frontend uses Mock Service Worker (MSW) to mock these endpoints during development.
  version: 1.0.0
  contact:
    name: AI Workflow Team
servers:
  - url: http://localhost:3000/api
    description: Development server (mocked by MSW)
  - url: https://api.workflow.example.com/api
    description: Production server (future)

tags:
  - name: Auth
    description: 认证和授权
  - name: Projects
    description: 项目管理
  - name: Workflows
    description: 工作流管理
  - name: Documents
    description: 文档管理
  - name: Dialog
    description: AI 对话
  - name: AMDP
    description: AMDP 主数据平台集成

paths:
  # ==================== Auth APIs ====================
  /auth/me:
    get:
      tags: [Auth]
      summary: 获取当前用户信息
      description: 通过 httpOnly cookie 验证用户身份
      security:
        - cookieAuth: []
      responses:
        '200':
          description: 用户信息
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/logout:
    post:
      tags: [Auth]
      summary: 登出
      description: 清除 httpOnly cookie
      security:
        - cookieAuth: []
      responses:
        '200':
          description: 登出成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /auth/refresh:
    post:
      tags: [Auth]
      summary: 刷新 token
      description: 刷新过期的 IAM token
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Token 已刷新
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # ==================== Projects APIs ====================
  /projects:
    get:
      tags: [Projects]
      summary: 获取项目列表
      description: 支持分页、搜索和分类过滤
      security:
        - cookieAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            default: 20
        - name: search
          in: query
          description: 项目名称搜索关键词
          schema:
            type: string
        - name: virtualOrg
          in: query
          description: 虚拟组织过滤
          schema:
            type: string
        - name: strategicOpportunity
          in: query
          description: 战略机会过滤
          schema:
            type: string
      responses:
        '200':
          description: 项目列表
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/PaginatedProjects'

    post:
      tags: [Projects]
      summary: 创建新项目
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectRequest'
      responses:
        '201':
          description: 项目创建成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Project'
        '400':
          $ref: '#/components/responses/BadRequest'

  /projects/{projectId}:
    get:
      tags: [Projects]
      summary: 获取项目详情
      security:
        - cookieAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 项目详情
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Project'
        '404':
          $ref: '#/components/responses/NotFound'

    patch:
      tags: [Projects]
      summary: 更新项目信息
      security:
        - cookieAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectRequest'
      responses:
        '200':
          description: 项目更新成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Project'
        '403':
          $ref: '#/components/responses/Forbidden'

    delete:
      tags: [Projects]
      summary: 删除项目
      description: 仅 Owner 可删除
      security:
        - cookieAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 项目删除成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '403':
          $ref: '#/components/responses/Forbidden'

  /projects/{projectId}/permissions:
    get:
      tags: [Projects]
      summary: 获取项目权限列表
      security:
        - cookieAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 权限列表
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/ProjectPermission'

    post:
      tags: [Projects]
      summary: 添加项目成员
      description: 仅 Owner 可操作
      security:
        - cookieAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                role:
                  $ref: '#/components/schemas/ProjectRole'
              required: [userId, role]
      responses:
        '201':
          description: 成员添加成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  # ==================== Workflows APIs ====================
  /projects/{projectId}/workflow:
    get:
      tags: [Workflows]
      summary: 获取项目工作流
      security:
        - cookieAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 工作流详情
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Workflow'

  /projects/{projectId}/workflow/stages/{stageId}/tasks:
    post:
      tags: [Workflows]
      summary: 添加阶段任务
      security:
        - cookieAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
        - name: stageId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskRequest'
      responses:
        '201':
          description: 任务创建成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Task'

  /projects/{projectId}/workflow/tasks/{taskId}:
    patch:
      tags: [Workflows]
      summary: 更新任务状态
      security:
        - cookieAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  $ref: '#/components/schemas/TaskStatus'
      responses:
        '200':
          description: 任务更新成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Task'

  # ==================== Documents APIs ====================
  /projects/{projectId}/documents:
    get:
      tags: [Documents]
      summary: 获取项目文档列表
      security:
        - cookieAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
        - name: stageId
          in: query
          description: 按阶段过滤
          schema:
            type: string
      responses:
        '200':
          description: 文档列表
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Document'

  /projects/{projectId}/documents/{documentId}:
    get:
      tags: [Documents]
      summary: 获取文档内容
      security:
        - cookieAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
        - name: documentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 文档详情
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Document'

    patch:
      tags: [Documents]
      summary: 更新文档内容
      security:
        - cookieAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
        - name: documentId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  description: Markdown 内容
      responses:
        '200':
          description: 文档更新成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Document'

  /projects/{projectId}/documents/{documentId}/export:
    get:
      tags: [Documents]
      summary: 导出文档为文本文件
      security:
        - cookieAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
        - name: documentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 文档文件
          content:
            text/markdown:
              schema:
                type: string

  # ==================== Dialog APIs ====================
  /projects/{projectId}/dialog/messages:
    get:
      tags: [Dialog]
      summary: 获取对话历史
      security:
        - cookieAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 100
        - name: before
          in: query
          description: 获取此消息ID之前的消息（分页）
          schema:
            type: string
      responses:
        '200':
          description: 对话历史
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Message'

    post:
      tags: [Dialog]
      summary: 发送消息给 AI
      description: 同步返回消息ID，AI响应通过 SSE 流式返回
      security:
        - cookieAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  description: 用户输入的消息内容
                context:
                  type: object
                  properties:
                    stageId:
                      type: string
                      description: 当前工作流阶段
                    documentId:
                      type: string
                      description: 相关文档ID（可选）
              required: [content]
      responses:
        '201':
          description: 消息已接收，AI正在处理
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          messageId:
                            type: string
                            description: 用户消息ID
                          streamUrl:
                            type: string
                            description: SSE 流式响应 URL
                            example: /api/projects/{projectId}/dialog/stream?messageId={messageId}

  /projects/{projectId}/dialog/stream:
    get:
      tags: [Dialog]
      summary: SSE 流式获取 AI 响应
      description: Server-Sent Events (SSE) 端点，实时流式返回 AI 生成的内容
      security:
        - cookieAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
        - name: messageId
          in: query
          required: true
          schema:
            type: string
          description: POST /dialog/messages 返回的 messageId
      responses:
        '200':
          description: SSE 流式响应
          content:
            text/event-stream:
              schema:
                type: string
                description: SSE 事件流，详见 sse-events.md

  # ==================== Feishu APIs ====================
  /projects/{projectId}/documents/{documentId}/feishu/sync:
    post:
      tags: [Documents]
      summary: 同步文档到飞书
      description: 将本地文档同步到飞书，创建新文档或更新已有文档
      security:
        - cookieAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
        - name: documentId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                createNewDoc:
                  type: boolean
                  default: false
                  description: 是否强制创建新飞书文档
      responses:
        '200':
          description: 同步成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          feishuDocId:
                            type: string
                          feishuUrl:
                            type: string
                        required: [feishuDocId, feishuUrl]
        '500':
          description: 同步失败
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  # ==================== AMDP APIs ====================
  /amdp/categories:
    get:
      tags: [AMDP]
      summary: 获取组织分类目录
      description: 同步自 AMDP 主数据平台
      security:
        - cookieAuth: []
      responses:
        '200':
          description: 分类目录树
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          virtualOrgs:
                            type: array
                            items:
                              type: object
                              properties:
                                id:
                                  type: string
                                name:
                                  type: string
                                strategicOpportunities:
                                  type: array
                                  items:
                                    type: object
                                    properties:
                                      id:
                                        type: string
                                      name:
                                        type: string
                                      jobFamilies:
                                        type: array
                                        items:
                                          type: object
                                          properties:
                                            id:
                                              type: string
                                            name:
                                              type: string

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: session

  schemas:
    # ==================== Common ====================
    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
        timestamp:
          type: string
          format: date-time
        error:
          $ref: '#/components/schemas/ApiError'
      required: [success, timestamp]

    SuccessResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            success:
              type: boolean
              example: true

    ApiError:
      type: object
      properties:
        code:
          type: string
          example: UNAUTHORIZED
        message:
          type: string
          example: 请先登录
        details:
          type: object

    PaginatedResponse:
      type: object
      properties:
        items:
          type: array
          items: {}
        total:
          type: integer
        page:
          type: integer
        pageSize:
          type: integer
        hasMore:
          type: boolean
      required: [items, total, page, pageSize, hasMore]

    # ==================== User ====================
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        avatar:
          type: string
      required: [id, name, email]

    # ==================== Project ====================
    Project:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        category:
          $ref: '#/components/schemas/ProjectCategory'
        currentStage:
          type: integer
          minimum: 0
          maximum: 4
        status:
          $ref: '#/components/schemas/ProjectStatus'
        owner:
          $ref: '#/components/schemas/User'
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/ProjectPermission'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required: [id, name, category, currentStage, status, owner, createdAt, updatedAt]

    ProjectCategory:
      type: object
      properties:
        virtualOrg:
          type: string
        strategicOpportunity:
          type: string
        jobFamily:
          type: string
      required: [virtualOrg, strategicOpportunity, jobFamily]

    ProjectStatus:
      type: string
      enum: [active, paused, completed, archived]

    ProjectRole:
      type: string
      enum: [owner, editor, viewer]

    ProjectPermission:
      type: object
      properties:
        userId:
          type: string
        role:
          $ref: '#/components/schemas/ProjectRole'
        grantedAt:
          type: string
          format: date-time
        grantedBy:
          type: string
      required: [userId, role, grantedAt, grantedBy]

    PaginatedProjects:
      allOf:
        - $ref: '#/components/schemas/PaginatedResponse'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/Project'

    CreateProjectRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
        category:
          $ref: '#/components/schemas/ProjectCategory'
      required: [name, category]

    UpdateProjectRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        status:
          $ref: '#/components/schemas/ProjectStatus'

    # ==================== Workflow ====================
    Workflow:
      type: object
      properties:
        id:
          type: string
        projectId:
          type: string
        stages:
          type: array
          items:
            $ref: '#/components/schemas/Stage'
        currentStageIndex:
          type: integer
          minimum: 0
          maximum: 4
      required: [id, projectId, stages, currentStageIndex]

    Stage:
      type: object
      properties:
        id:
          type: string
        stageNumber:
          type: integer
          minimum: 0
          maximum: 4
        name:
          type: string
        status:
          $ref: '#/components/schemas/StageStatus'
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/Task'
        documents:
          type: array
          items:
            $ref: '#/components/schemas/Document'
        executionLogs:
          type: array
          items:
            $ref: '#/components/schemas/ExecutionLog'
        startedAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
      required: [id, stageNumber, name, status, tasks, documents, executionLogs]

    StageStatus:
      type: string
      enum: [pending, in_progress, completed]

    Task:
      type: object
      properties:
        id:
          type: string
        stageId:
          type: string
        name:
          type: string
        description:
          type: string
        status:
          $ref: '#/components/schemas/TaskStatus'
        createdAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
      required: [id, stageId, name, status, createdAt]

    TaskStatus:
      type: string
      enum: [pending, in_progress, completed, failed, paused]

    CreateTaskRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
      required: [name]

    # ==================== Document ====================
    Document:
      type: object
      properties:
        id:
          type: string
        projectId:
          type: string
        stageId:
          type: string
        name:
          type: string
        content:
          type: string
          description: Markdown 内容
        version:
          type: integer
        status:
          $ref: '#/components/schemas/DocumentStatus'
        metadata:
          $ref: '#/components/schemas/DocumentMetadata'
        feishuDocId:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required: [id, projectId, stageId, name, content, version, status, metadata, createdAt, updatedAt]

    DocumentStatus:
      type: string
      enum: [draft, completed]

    DocumentMetadata:
      type: object
      properties:
        author:
          type: string
        createdBy:
          type: string
        lastModifiedBy:
          type: string
        wordCount:
          type: integer
      required: [author, createdBy, lastModifiedBy, wordCount]

    # ==================== Dialog ====================
    Message:
      type: object
      properties:
        id:
          type: string
        conversationId:
          type: string
        sender:
          $ref: '#/components/schemas/MessageSender'
        content:
          type: string
        type:
          $ref: '#/components/schemas/MessageType'
        timestamp:
          type: string
          format: date-time
        metadata:
          $ref: '#/components/schemas/MessageMetadata'
      required: [id, conversationId, sender, content, type, timestamp]

    MessageSender:
      type: string
      enum: [user, ai, system]

    MessageType:
      type: string
      enum: [input, response, command_success, command_failure, executing]

    MessageMetadata:
      type: object
      properties:
        documentId:
          type: string
        taskId:
          type: string
        errorDetails:
          type: string

    # ==================== ExecutionLog ====================
    ExecutionLog:
      type: object
      properties:
        id:
          type: string
        stageId:
          type: string
        type:
          $ref: '#/components/schemas/LogType'
        status:
          $ref: '#/components/schemas/LogStatus'
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        metadata:
          $ref: '#/components/schemas/LogMetadata'
      required: [id, stageId, type, status, message, timestamp]

    LogType:
      type: string
      enum: [user_action, ai_process, system_event]

    LogStatus:
      type: string
      enum: [success, failure, in_progress]

    LogMetadata:
      type: object
      properties:
        documentId:
          type: string
        feishuDocId:
          type: string
        errorDetails:
          type: string

  responses:
    BadRequest:
      description: 请求参数错误
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ApiResponse'
              - type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    $ref: '#/components/schemas/ApiError'

    Unauthorized:
      description: 未授权，需要登录
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ApiResponse'
              - type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                        example: UNAUTHORIZED
                      message:
                        type: string
                        example: 请先登录

    Forbidden:
      description: 无权限访问
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ApiResponse'
              - type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                        example: FORBIDDEN
                      message:
                        type: string
                        example: 您没有权限访问此资源

    NotFound:
      description: 资源不存在
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ApiResponse'
              - type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                        example: NOT_FOUND
                      message:
                        type: string
                        example: 请求的资源不存在
